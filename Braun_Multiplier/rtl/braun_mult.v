///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///                      6-Bit Braun Multiplier                                ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///   braun_mult Module:  6-Bit Implementation of Braun Multiplier             ///
///                                                                             ///
///   Copyright (C) 2025 Ujval Madhu,                                            ///
///   This program is free software: you can redistribute it and/or modify       ///
///   it under the terms of the GNU General Public License as published by       ///
///   the Free Software Foundation, either version 3 of the License, or          ///
///   (at your option) any later version.                                        ///
///                                                                              ///
///   This program is distributed in the hope that it will be useful,            ///
///   but WITHOUT ANY WARRANTY; without even the implied warranty of             ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ///
///   GNU General Public License for more details.                               ///
///                                                                              ///
///   You should have received a copy of the GNU General Public License          ///
///   along with this program.  If not, see <https://www.gnu.org/licenses/>.     ///
///                                                                              ///
////////////////////////////////////////////////////////////////////////////////////
//  CVS Log
//
//  Id: braun_mult.v, v 1.0
//
//  $Date: 2025-3-17
//  $Revision: 1.0 
//  $Author:  Ujval Madhu

module braun_mult(
    input  [3 - 1 : 0] a,
    input  [3 - 1 : 0] b,
    output [3 * 2 : 0] prod
);

wire [9 - 1 : 0] ab_prod;          // For Partial Products
wire [6 - 1 : 0] ps;                // For Partial Sums generated by FAs
wire [6 - 1 : 0] co;                // For Carry_out from each FA      

and ab00(ab_prod[0], a[0], b[0]);
and ab10(ab_prod[1], a[1], b[0]);
and ab20(ab_prod[2], a[2], b[0]);

and ab01(ab_prod[3], a[0], b[1]);
and ab11(ab_prod[4], a[1], b[1]);
and ab21(ab_prod[5], a[2], b[1]);

and ab02(ab_prod[6], a[0], b[2]);
and ab12(ab_prod[7], a[1], b[2]);
and ab22(ab_prod[8], a[2], b[2]);








assign ps[0] = ab_prod[0];
0 ] = 1'b0;
6 ]));
11 ]));
13 ));
6 ]));
11 ]));
11 ));


endmodule
