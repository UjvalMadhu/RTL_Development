///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///                      16-Bit Braun Multiplier                                ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///   braun_mult Module:  16-Bit Implementation of Braun Multiplier             ///
///                                                                             ///
///   Copyright (C) 2025 Ujval Madhu,                                            ///
///   This program is free software: you can redistribute it and/or modify       ///
///   it under the terms of the GNU General Public License as published by       ///
///   the Free Software Foundation, either version 3 of the License, or          ///
///   (at your option) any later version.                                        ///
///                                                                              ///
///   This program is distributed in the hope that it will be useful,            ///
///   but WITHOUT ANY WARRANTY; without even the implied warranty of             ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ///
///   GNU General Public License for more details.                               ///
///                                                                              ///
///   You should have received a copy of the GNU General Public License          ///
///   along with this program.  If not, see <https://www.gnu.org/licenses/>.     ///
///                                                                              ///
////////////////////////////////////////////////////////////////////////////////////
//  CVS Log
//
//  Id: braun_mult.v, v 1.0
//
//  $Date: 2025-4-6
//  $Revision: 1.0 
//  $Author:  Ujval Madhu

module braun_mult (

    input  [8 - 1 : 0] a,
    input  [8 - 1 : 0] b,
    output [8 * 2 -1 : 0] prod
);

wire [64 - 1 : 0] ab_prod;          // For Partial Products
wire [57 - 1 : 0] psum;                // For Partial Sums generated by FAs
wire [((8 +1)*(8 -1)) - 1 : 0] carry;                // For Carrys from and to each FA

assign carry[0] = 0;
assign carry[9] = 0;
assign carry[18] = 0;
assign carry[27] = 0;
assign carry[36] = 0;
assign carry[45] = 0;
assign carry[54] = 0;



and a0b0(ab_prod[0], a[0], b[0]);
and a1b0(ab_prod[1], a[1], b[0]);
and a2b0(ab_prod[2], a[2], b[0]);
and a3b0(ab_prod[3], a[3], b[0]);
and a4b0(ab_prod[4], a[4], b[0]);
and a5b0(ab_prod[5], a[5], b[0]);
and a6b0(ab_prod[6], a[6], b[0]);
and a7b0(ab_prod[7], a[7], b[0]);

and a0b1(ab_prod[8], a[0], b[1]);
and a1b1(ab_prod[9], a[1], b[1]);
and a2b1(ab_prod[10], a[2], b[1]);
and a3b1(ab_prod[11], a[3], b[1]);
and a4b1(ab_prod[12], a[4], b[1]);
and a5b1(ab_prod[13], a[5], b[1]);
and a6b1(ab_prod[14], a[6], b[1]);
and a7b1(ab_prod[15], a[7], b[1]);

and a0b2(ab_prod[16], a[0], b[2]);
and a1b2(ab_prod[17], a[1], b[2]);
and a2b2(ab_prod[18], a[2], b[2]);
and a3b2(ab_prod[19], a[3], b[2]);
and a4b2(ab_prod[20], a[4], b[2]);
and a5b2(ab_prod[21], a[5], b[2]);
and a6b2(ab_prod[22], a[6], b[2]);
and a7b2(ab_prod[23], a[7], b[2]);

and a0b3(ab_prod[24], a[0], b[3]);
and a1b3(ab_prod[25], a[1], b[3]);
and a2b3(ab_prod[26], a[2], b[3]);
and a3b3(ab_prod[27], a[3], b[3]);
and a4b3(ab_prod[28], a[4], b[3]);
and a5b3(ab_prod[29], a[5], b[3]);
and a6b3(ab_prod[30], a[6], b[3]);
and a7b3(ab_prod[31], a[7], b[3]);

and a0b4(ab_prod[32], a[0], b[4]);
and a1b4(ab_prod[33], a[1], b[4]);
and a2b4(ab_prod[34], a[2], b[4]);
and a3b4(ab_prod[35], a[3], b[4]);
and a4b4(ab_prod[36], a[4], b[4]);
and a5b4(ab_prod[37], a[5], b[4]);
and a6b4(ab_prod[38], a[6], b[4]);
and a7b4(ab_prod[39], a[7], b[4]);

and a0b5(ab_prod[40], a[0], b[5]);
and a1b5(ab_prod[41], a[1], b[5]);
and a2b5(ab_prod[42], a[2], b[5]);
and a3b5(ab_prod[43], a[3], b[5]);
and a4b5(ab_prod[44], a[4], b[5]);
and a5b5(ab_prod[45], a[5], b[5]);
and a6b5(ab_prod[46], a[6], b[5]);
and a7b5(ab_prod[47], a[7], b[5]);

and a0b6(ab_prod[48], a[0], b[6]);
and a1b6(ab_prod[49], a[1], b[6]);
and a2b6(ab_prod[50], a[2], b[6]);
and a3b6(ab_prod[51], a[3], b[6]);
and a4b6(ab_prod[52], a[4], b[6]);
and a5b6(ab_prod[53], a[5], b[6]);
and a6b6(ab_prod[54], a[6], b[6]);
and a7b6(ab_prod[55], a[7], b[6]);

and a0b7(ab_prod[56], a[0], b[7]);
and a1b7(ab_prod[57], a[1], b[7]);
and a2b7(ab_prod[58], a[2], b[7]);
and a3b7(ab_prod[59], a[3], b[7]);
and a4b7(ab_prod[60], a[4], b[7]);
and a5b7(ab_prod[61], a[5], b[7]);
and a6b7(ab_prod[62], a[6], b[7]);
and a7b7(ab_prod[63], a[7], b[7]);







assign psum[0] = ab_prod[0];

fa fa1 (.a(ab_prod[1]), .b(ab_prod[8]), .c_in(carry[0]), .sum(psum[1]), .c_out(carry[0 + 1]) );
fa fa2 (.a(ab_prod[2]), .b(ab_prod[9]), .c_in(carry[1]), .sum(psum[2]), .c_out(carry[1 + 1]) );
fa fa3 (.a(ab_prod[3]), .b(ab_prod[10]), .c_in(carry[2]), .sum(psum[3]), .c_out(carry[2 + 1]) );
fa fa4 (.a(ab_prod[4]), .b(ab_prod[11]), .c_in(carry[3]), .sum(psum[4]), .c_out(carry[3 + 1]) );
fa fa5 (.a(ab_prod[5]), .b(ab_prod[12]), .c_in(carry[4]), .sum(psum[5]), .c_out(carry[4 + 1]) );
fa fa6 (.a(ab_prod[6]), .b(ab_prod[13]), .c_in(carry[5]), .sum(psum[6]), .c_out(carry[5 + 1]) );
fa fa7 (.a(ab_prod[7]), .b(ab_prod[14]), .c_in(carry[6]), .sum(psum[7]), .c_out(carry[6 + 1]) );
fa fa8 (.a(1'b0), .b(ab_prod[15]), .c_in(carry[7]), .sum(psum[8]), .c_out(carry[7 + 1]) );

fa fa9(.a(ab_prod[16]), .b(psum[2]), .c_in(carry[9]), .sum(psum[9]), .c_out(carry[9 + 1]) );
fa fa10(.a(ab_prod[17]), .b(psum[3]), .c_in(carry[10]), .sum(psum[10]), .c_out(carry[10 + 1]) );
fa fa11(.a(ab_prod[18]), .b(psum[4]), .c_in(carry[11]), .sum(psum[11]), .c_out(carry[11 + 1]) );
fa fa12(.a(ab_prod[19]), .b(psum[5]), .c_in(carry[12]), .sum(psum[12]), .c_out(carry[12 + 1]) );
fa fa13(.a(ab_prod[20]), .b(psum[6]), .c_in(carry[13]), .sum(psum[13]), .c_out(carry[13 + 1]) );
fa fa14(.a(ab_prod[21]), .b(psum[7]), .c_in(carry[14]), .sum(psum[14]), .c_out(carry[14 + 1]) );
fa fa15(.a(ab_prod[22]), .b(psum[8]), .c_in(carry[15]), .sum(psum[15]), .c_out(carry[15 + 1]) );
fa fa16 (.a(ab_prod[23]), .b(carry[16 - 8]), .c_in(carry[16]), .sum(psum[16]), .c_out(carry[16 + 1]) );

fa fa17(.a(ab_prod[24]), .b(psum[10]), .c_in(carry[18]), .sum(psum[17]), .c_out(carry[18 + 1]) );
fa fa18(.a(ab_prod[25]), .b(psum[11]), .c_in(carry[19]), .sum(psum[18]), .c_out(carry[19 + 1]) );
fa fa19(.a(ab_prod[26]), .b(psum[12]), .c_in(carry[20]), .sum(psum[19]), .c_out(carry[20 + 1]) );
fa fa20(.a(ab_prod[27]), .b(psum[13]), .c_in(carry[21]), .sum(psum[20]), .c_out(carry[21 + 1]) );
fa fa21(.a(ab_prod[28]), .b(psum[14]), .c_in(carry[22]), .sum(psum[21]), .c_out(carry[22 + 1]) );
fa fa22(.a(ab_prod[29]), .b(psum[15]), .c_in(carry[23]), .sum(psum[22]), .c_out(carry[23 + 1]) );
fa fa23(.a(ab_prod[30]), .b(psum[16]), .c_in(carry[24]), .sum(psum[23]), .c_out(carry[24 + 1]) );
fa fa24 (.a(ab_prod[31]), .b(carry[25 - 8]), .c_in(carry[25]), .sum(psum[24]), .c_out(carry[25 + 1]) );

fa fa25(.a(ab_prod[32]), .b(psum[18]), .c_in(carry[27]), .sum(psum[25]), .c_out(carry[27 + 1]) );
fa fa26(.a(ab_prod[33]), .b(psum[19]), .c_in(carry[28]), .sum(psum[26]), .c_out(carry[28 + 1]) );
fa fa27(.a(ab_prod[34]), .b(psum[20]), .c_in(carry[29]), .sum(psum[27]), .c_out(carry[29 + 1]) );
fa fa28(.a(ab_prod[35]), .b(psum[21]), .c_in(carry[30]), .sum(psum[28]), .c_out(carry[30 + 1]) );
fa fa29(.a(ab_prod[36]), .b(psum[22]), .c_in(carry[31]), .sum(psum[29]), .c_out(carry[31 + 1]) );
fa fa30(.a(ab_prod[37]), .b(psum[23]), .c_in(carry[32]), .sum(psum[30]), .c_out(carry[32 + 1]) );
fa fa31(.a(ab_prod[38]), .b(psum[24]), .c_in(carry[33]), .sum(psum[31]), .c_out(carry[33 + 1]) );
fa fa32 (.a(ab_prod[39]), .b(carry[34 - 8]), .c_in(carry[34]), .sum(psum[32]), .c_out(carry[34 + 1]) );

fa fa33(.a(ab_prod[40]), .b(psum[26]), .c_in(carry[36]), .sum(psum[33]), .c_out(carry[36 + 1]) );
fa fa34(.a(ab_prod[41]), .b(psum[27]), .c_in(carry[37]), .sum(psum[34]), .c_out(carry[37 + 1]) );
fa fa35(.a(ab_prod[42]), .b(psum[28]), .c_in(carry[38]), .sum(psum[35]), .c_out(carry[38 + 1]) );
fa fa36(.a(ab_prod[43]), .b(psum[29]), .c_in(carry[39]), .sum(psum[36]), .c_out(carry[39 + 1]) );
fa fa37(.a(ab_prod[44]), .b(psum[30]), .c_in(carry[40]), .sum(psum[37]), .c_out(carry[40 + 1]) );
fa fa38(.a(ab_prod[45]), .b(psum[31]), .c_in(carry[41]), .sum(psum[38]), .c_out(carry[41 + 1]) );
fa fa39(.a(ab_prod[46]), .b(psum[32]), .c_in(carry[42]), .sum(psum[39]), .c_out(carry[42 + 1]) );
fa fa40 (.a(ab_prod[47]), .b(carry[43 - 8]), .c_in(carry[43]), .sum(psum[40]), .c_out(carry[43 + 1]) );

fa fa41(.a(ab_prod[48]), .b(psum[34]), .c_in(carry[45]), .sum(psum[41]), .c_out(carry[45 + 1]) );
fa fa42(.a(ab_prod[49]), .b(psum[35]), .c_in(carry[46]), .sum(psum[42]), .c_out(carry[46 + 1]) );
fa fa43(.a(ab_prod[50]), .b(psum[36]), .c_in(carry[47]), .sum(psum[43]), .c_out(carry[47 + 1]) );
fa fa44(.a(ab_prod[51]), .b(psum[37]), .c_in(carry[48]), .sum(psum[44]), .c_out(carry[48 + 1]) );
fa fa45(.a(ab_prod[52]), .b(psum[38]), .c_in(carry[49]), .sum(psum[45]), .c_out(carry[49 + 1]) );
fa fa46(.a(ab_prod[53]), .b(psum[39]), .c_in(carry[50]), .sum(psum[46]), .c_out(carry[50 + 1]) );
fa fa47(.a(ab_prod[54]), .b(psum[40]), .c_in(carry[51]), .sum(psum[47]), .c_out(carry[51 + 1]) );
fa fa48 (.a(ab_prod[55]), .b(carry[52 - 8]), .c_in(carry[52]), .sum(psum[48]), .c_out(carry[52 + 1]) );

fa fa49(.a(ab_prod[56]), .b(psum[42]), .c_in(carry[54]), .sum(psum[49]), .c_out(carry[54 + 1]) );
fa fa50(.a(ab_prod[57]), .b(psum[43]), .c_in(carry[55]), .sum(psum[50]), .c_out(carry[55 + 1]) );
fa fa51(.a(ab_prod[58]), .b(psum[44]), .c_in(carry[56]), .sum(psum[51]), .c_out(carry[56 + 1]) );
fa fa52(.a(ab_prod[59]), .b(psum[45]), .c_in(carry[57]), .sum(psum[52]), .c_out(carry[57 + 1]) );
fa fa53(.a(ab_prod[60]), .b(psum[46]), .c_in(carry[58]), .sum(psum[53]), .c_out(carry[58 + 1]) );
fa fa54(.a(ab_prod[61]), .b(psum[47]), .c_in(carry[59]), .sum(psum[54]), .c_out(carry[59 + 1]) );
fa fa55(.a(ab_prod[62]), .b(psum[48]), .c_in(carry[60]), .sum(psum[55]), .c_out(carry[60 + 1]) );
fa fa56 (.a(ab_prod[63]), .b(carry[61 - 8]), .c_in(carry[61]), .sum(psum[56]), .c_out(carry[61 + 1]) );


endmodule
