///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///                      16-Bit Braun Multiplier                                ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///   braun_mult Module:  16-Bit Implementation of Braun Multiplier             ///
///                                                                             ///
///   Copyright (C) 2025 Ujval Madhu,                                            ///
///   This program is free software: you can redistribute it and/or modify       ///
///   it under the terms of the GNU General Public License as published by       ///
///   the Free Software Foundation, either version 3 of the License, or          ///
///   (at your option) any later version.                                        ///
///                                                                              ///
///   This program is distributed in the hope that it will be useful,            ///
///   but WITHOUT ANY WARRANTY; without even the implied warranty of             ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ///
///   GNU General Public License for more details.                               ///
///                                                                              ///
///   You should have received a copy of the GNU General Public License          ///
///   along with this program.  If not, see <https://www.gnu.org/licenses/>.     ///
///                                                                              ///
////////////////////////////////////////////////////////////////////////////////////
//  CVS Log
//
//  Id: braun_mult.v, v 1.0
//
//  $Date: 2025-3-17
//  $Revision: 1.0 
//  $Author:  Ujval Madhu

module braun_mult(
    input  [8 - 1 : 0] a,
    input  [8 - 1 : 0] b,
    output [8 * 2 : 0] prod
);

wire [64 - 1 : 0] ab_prod;          // For Partial Products
wire [56 - 1 : 0] ps;                // For Partial Sums generated by FAs
wire [56 - 1 : 0] co;                // For Carry_out from each FA      

and ab00(ab_prod[0], a[0], b[0]);
and ab10(ab_prod[1], a[1], b[0]);
and ab20(ab_prod[2], a[2], b[0]);
and ab30(ab_prod[3], a[3], b[0]);
and ab40(ab_prod[4], a[4], b[0]);
and ab50(ab_prod[5], a[5], b[0]);
and ab60(ab_prod[6], a[6], b[0]);
and ab70(ab_prod[7], a[7], b[0]);

and ab01(ab_prod[8], a[0], b[1]);
and ab11(ab_prod[9], a[1], b[1]);
and ab21(ab_prod[10], a[2], b[1]);
and ab31(ab_prod[11], a[3], b[1]);
and ab41(ab_prod[12], a[4], b[1]);
and ab51(ab_prod[13], a[5], b[1]);
and ab61(ab_prod[14], a[6], b[1]);
and ab71(ab_prod[15], a[7], b[1]);

and ab02(ab_prod[16], a[0], b[2]);
and ab12(ab_prod[17], a[1], b[2]);
and ab22(ab_prod[18], a[2], b[2]);
and ab32(ab_prod[19], a[3], b[2]);
and ab42(ab_prod[20], a[4], b[2]);
and ab52(ab_prod[21], a[5], b[2]);
and ab62(ab_prod[22], a[6], b[2]);
and ab72(ab_prod[23], a[7], b[2]);

and ab03(ab_prod[24], a[0], b[3]);
and ab13(ab_prod[25], a[1], b[3]);
and ab23(ab_prod[26], a[2], b[3]);
and ab33(ab_prod[27], a[3], b[3]);
and ab43(ab_prod[28], a[4], b[3]);
and ab53(ab_prod[29], a[5], b[3]);
and ab63(ab_prod[30], a[6], b[3]);
and ab73(ab_prod[31], a[7], b[3]);

and ab04(ab_prod[32], a[0], b[4]);
and ab14(ab_prod[33], a[1], b[4]);
and ab24(ab_prod[34], a[2], b[4]);
and ab34(ab_prod[35], a[3], b[4]);
and ab44(ab_prod[36], a[4], b[4]);
and ab54(ab_prod[37], a[5], b[4]);
and ab64(ab_prod[38], a[6], b[4]);
and ab74(ab_prod[39], a[7], b[4]);

and ab05(ab_prod[40], a[0], b[5]);
and ab15(ab_prod[41], a[1], b[5]);
and ab25(ab_prod[42], a[2], b[5]);
and ab35(ab_prod[43], a[3], b[5]);
and ab45(ab_prod[44], a[4], b[5]);
and ab55(ab_prod[45], a[5], b[5]);
and ab65(ab_prod[46], a[6], b[5]);
and ab75(ab_prod[47], a[7], b[5]);

and ab06(ab_prod[48], a[0], b[6]);
and ab16(ab_prod[49], a[1], b[6]);
and ab26(ab_prod[50], a[2], b[6]);
and ab36(ab_prod[51], a[3], b[6]);
and ab46(ab_prod[52], a[4], b[6]);
and ab56(ab_prod[53], a[5], b[6]);
and ab66(ab_prod[54], a[6], b[6]);
and ab76(ab_prod[55], a[7], b[6]);

and ab07(ab_prod[56], a[0], b[7]);
and ab17(ab_prod[57], a[1], b[7]);
and ab27(ab_prod[58], a[2], b[7]);
and ab37(ab_prod[59], a[3], b[7]);
and ab47(ab_prod[60], a[4], b[7]);
and ab57(ab_prod[61], a[5], b[7]);
and ab67(ab_prod[62], a[6], b[7]);
and ab77(ab_prod[63], a[7], b[7]);







Input_size** =64

endmodule
