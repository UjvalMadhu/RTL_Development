///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///                      16-Bit Braun Multiplier                                ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///   braun_mult Module:  16-Bit Implementation of Braun Multiplier             ///
///                                                                             ///
///   Copyright (C) 2025 Ujval Madhu,                                            ///
///   This program is free software: you can redistribute it and/or modify       ///
///   it under the terms of the GNU General Public License as published by       ///
///   the Free Software Foundation, either version 3 of the License, or          ///
///   (at your option) any later version.                                        ///
///                                                                              ///
///   This program is distributed in the hope that it will be useful,            ///
///   but WITHOUT ANY WARRANTY; without even the implied warranty of             ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ///
///   GNU General Public License for more details.                               ///
///                                                                              ///
///   You should have received a copy of the GNU General Public License          ///
///   along with this program.  If not, see <https://www.gnu.org/licenses/>.     ///
///                                                                              ///
////////////////////////////////////////////////////////////////////////////////////
//  CVS Log
//
//  Id: braun_mult.v, v 1.0
//
//  $Date: 2025-4-5
//  $Revision: 1.0 
//  $Author:  Ujval Madhu

module braun_mult (

    input  [8 - 1 : 0] a,
    input  [8 - 1 : 0] b,
    output [8 * 2 -1 : 0] prod
);

wire [64 - 1 : 0] ab_prod;          // For Partial Products
wire [56 - 1 : 0] psum;                // For Partial Sums generated by FAs
wire [((8 +1)*(8 -1)) - 1 : 0] carry;                // For Carrys from and to each FA

assign carry[0] = 0;
assign carry[9] = 0;
assign carry[18] = 0;
assign carry[27] = 0;
assign carry[36] = 0;
assign carry[45] = 0;
assign carry[54] = 0;



and a0b0(ab_prod[0], a[0], b[0]);
and a1b0(ab_prod[1], a[1], b[0]);
and a2b0(ab_prod[2], a[2], b[0]);
and a3b0(ab_prod[3], a[3], b[0]);
and a4b0(ab_prod[4], a[4], b[0]);
and a5b0(ab_prod[5], a[5], b[0]);
and a6b0(ab_prod[6], a[6], b[0]);
and a7b0(ab_prod[7], a[7], b[0]);

and a0b1(ab_prod[8], a[0], b[1]);
and a1b1(ab_prod[9], a[1], b[1]);
and a2b1(ab_prod[10], a[2], b[1]);
and a3b1(ab_prod[11], a[3], b[1]);
and a4b1(ab_prod[12], a[4], b[1]);
and a5b1(ab_prod[13], a[5], b[1]);
and a6b1(ab_prod[14], a[6], b[1]);
and a7b1(ab_prod[15], a[7], b[1]);

and a0b2(ab_prod[16], a[0], b[2]);
and a1b2(ab_prod[17], a[1], b[2]);
and a2b2(ab_prod[18], a[2], b[2]);
and a3b2(ab_prod[19], a[3], b[2]);
and a4b2(ab_prod[20], a[4], b[2]);
and a5b2(ab_prod[21], a[5], b[2]);
and a6b2(ab_prod[22], a[6], b[2]);
and a7b2(ab_prod[23], a[7], b[2]);

and a0b3(ab_prod[24], a[0], b[3]);
and a1b3(ab_prod[25], a[1], b[3]);
and a2b3(ab_prod[26], a[2], b[3]);
and a3b3(ab_prod[27], a[3], b[3]);
and a4b3(ab_prod[28], a[4], b[3]);
and a5b3(ab_prod[29], a[5], b[3]);
and a6b3(ab_prod[30], a[6], b[3]);
and a7b3(ab_prod[31], a[7], b[3]);

and a0b4(ab_prod[32], a[0], b[4]);
and a1b4(ab_prod[33], a[1], b[4]);
and a2b4(ab_prod[34], a[2], b[4]);
and a3b4(ab_prod[35], a[3], b[4]);
and a4b4(ab_prod[36], a[4], b[4]);
and a5b4(ab_prod[37], a[5], b[4]);
and a6b4(ab_prod[38], a[6], b[4]);
and a7b4(ab_prod[39], a[7], b[4]);

and a0b5(ab_prod[40], a[0], b[5]);
and a1b5(ab_prod[41], a[1], b[5]);
and a2b5(ab_prod[42], a[2], b[5]);
and a3b5(ab_prod[43], a[3], b[5]);
and a4b5(ab_prod[44], a[4], b[5]);
and a5b5(ab_prod[45], a[5], b[5]);
and a6b5(ab_prod[46], a[6], b[5]);
and a7b5(ab_prod[47], a[7], b[5]);

and a0b6(ab_prod[48], a[0], b[6]);
and a1b6(ab_prod[49], a[1], b[6]);
and a2b6(ab_prod[50], a[2], b[6]);
and a3b6(ab_prod[51], a[3], b[6]);
and a4b6(ab_prod[52], a[4], b[6]);
and a5b6(ab_prod[53], a[5], b[6]);
and a6b6(ab_prod[54], a[6], b[6]);
and a7b6(ab_prod[55], a[7], b[6]);

and a0b7(ab_prod[56], a[0], b[7]);
and a1b7(ab_prod[57], a[1], b[7]);
and a2b7(ab_prod[58], a[2], b[7]);
and a3b7(ab_prod[59], a[3], b[7]);
and a4b7(ab_prod[60], a[4], b[7]);
and a5b7(ab_prod[61], a[5], b[7]);
and a6b7(ab_prod[62], a[6], b[7]);
and a7b7(ab_prod[63], a[7], b[7]);









endmodule
