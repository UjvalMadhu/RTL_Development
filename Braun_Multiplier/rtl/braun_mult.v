///////////////////////////////////////////////////////////////////////////////////
///                                                                             ///
///                      36-Bit Braun Multiplier                                ///
///                                                                             ///
///////////////////////////////////////////////////////////////////////////////////
///   braun_mult Module:  36-Bit Implementation of Braun Multiplier             ///
///                                                                             ///
///            This code is Generated by a Perl Script.                         ///
///                                                                             ///
///   Copyright (C) 2025 Ujval Madhu,                                            ///
///   This program is free software: you can redistribute it and/or modify       ///
///   it under the terms of the GNU General Public License as published by       ///
///   the Free Software Foundation, either version 3 of the License, or          ///
///   (at your option) any later version.                                        ///
///                                                                              ///
///   This program is distributed in the hope that it will be useful,            ///
///   but WITHOUT ANY WARRANTY; without even the implied warranty of             ///
///   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              ///
///   GNU General Public License for more details.                               ///
///                                                                              ///
///   You should have received a copy of the GNU General Public License          ///
///   along with this program.  If not, see <https://www.gnu.org/licenses/>.     ///
///                                                                              ///
////////////////////////////////////////////////////////////////////////////////////
//  CVS Log
//
//  Id: braun_mult.v, v 1.0
//
//  $Date: 2025-4-7
//  $Revision: 1.0 
//  $Author:  Ujval Madhu

module braun_mult (

    input  [18 - 1 : 0] a,
    input  [18 - 1 : 0] b,
    output [(18 * 2) -1 : 0] prod
);

wire [324 - 1 : 0] ab_prod;                    // For Partial Products
wire [307 - 1 : 0] psum;                      // For Partial Sums generated by FAs

wire [((18 +1)*(18 -1)) - 1 : 0] carry;         // For Carrys from and to each FA


// Assigning Carry Ins for each row of the Multiplier

assign carry[0] = 0;
assign carry[19] = 0;
assign carry[38] = 0;
assign carry[57] = 0;
assign carry[76] = 0;
assign carry[95] = 0;
assign carry[114] = 0;
assign carry[133] = 0;
assign carry[152] = 0;
assign carry[171] = 0;
assign carry[190] = 0;
assign carry[209] = 0;
assign carry[228] = 0;
assign carry[247] = 0;
assign carry[266] = 0;
assign carry[285] = 0;
assign carry[304] = 0;



// Generating Partial Products

and a0b0(ab_prod[0], a[0], b[0]);
and a1b0(ab_prod[1], a[1], b[0]);
and a2b0(ab_prod[2], a[2], b[0]);
and a3b0(ab_prod[3], a[3], b[0]);
and a4b0(ab_prod[4], a[4], b[0]);
and a5b0(ab_prod[5], a[5], b[0]);
and a6b0(ab_prod[6], a[6], b[0]);
and a7b0(ab_prod[7], a[7], b[0]);
and a8b0(ab_prod[8], a[8], b[0]);
and a9b0(ab_prod[9], a[9], b[0]);
and a10b0(ab_prod[10], a[10], b[0]);
and a11b0(ab_prod[11], a[11], b[0]);
and a12b0(ab_prod[12], a[12], b[0]);
and a13b0(ab_prod[13], a[13], b[0]);
and a14b0(ab_prod[14], a[14], b[0]);
and a15b0(ab_prod[15], a[15], b[0]);
and a16b0(ab_prod[16], a[16], b[0]);
and a17b0(ab_prod[17], a[17], b[0]);

and a0b1(ab_prod[18], a[0], b[1]);
and a1b1(ab_prod[19], a[1], b[1]);
and a2b1(ab_prod[20], a[2], b[1]);
and a3b1(ab_prod[21], a[3], b[1]);
and a4b1(ab_prod[22], a[4], b[1]);
and a5b1(ab_prod[23], a[5], b[1]);
and a6b1(ab_prod[24], a[6], b[1]);
and a7b1(ab_prod[25], a[7], b[1]);
and a8b1(ab_prod[26], a[8], b[1]);
and a9b1(ab_prod[27], a[9], b[1]);
and a10b1(ab_prod[28], a[10], b[1]);
and a11b1(ab_prod[29], a[11], b[1]);
and a12b1(ab_prod[30], a[12], b[1]);
and a13b1(ab_prod[31], a[13], b[1]);
and a14b1(ab_prod[32], a[14], b[1]);
and a15b1(ab_prod[33], a[15], b[1]);
and a16b1(ab_prod[34], a[16], b[1]);
and a17b1(ab_prod[35], a[17], b[1]);

and a0b2(ab_prod[36], a[0], b[2]);
and a1b2(ab_prod[37], a[1], b[2]);
and a2b2(ab_prod[38], a[2], b[2]);
and a3b2(ab_prod[39], a[3], b[2]);
and a4b2(ab_prod[40], a[4], b[2]);
and a5b2(ab_prod[41], a[5], b[2]);
and a6b2(ab_prod[42], a[6], b[2]);
and a7b2(ab_prod[43], a[7], b[2]);
and a8b2(ab_prod[44], a[8], b[2]);
and a9b2(ab_prod[45], a[9], b[2]);
and a10b2(ab_prod[46], a[10], b[2]);
and a11b2(ab_prod[47], a[11], b[2]);
and a12b2(ab_prod[48], a[12], b[2]);
and a13b2(ab_prod[49], a[13], b[2]);
and a14b2(ab_prod[50], a[14], b[2]);
and a15b2(ab_prod[51], a[15], b[2]);
and a16b2(ab_prod[52], a[16], b[2]);
and a17b2(ab_prod[53], a[17], b[2]);

and a0b3(ab_prod[54], a[0], b[3]);
and a1b3(ab_prod[55], a[1], b[3]);
and a2b3(ab_prod[56], a[2], b[3]);
and a3b3(ab_prod[57], a[3], b[3]);
and a4b3(ab_prod[58], a[4], b[3]);
and a5b3(ab_prod[59], a[5], b[3]);
and a6b3(ab_prod[60], a[6], b[3]);
and a7b3(ab_prod[61], a[7], b[3]);
and a8b3(ab_prod[62], a[8], b[3]);
and a9b3(ab_prod[63], a[9], b[3]);
and a10b3(ab_prod[64], a[10], b[3]);
and a11b3(ab_prod[65], a[11], b[3]);
and a12b3(ab_prod[66], a[12], b[3]);
and a13b3(ab_prod[67], a[13], b[3]);
and a14b3(ab_prod[68], a[14], b[3]);
and a15b3(ab_prod[69], a[15], b[3]);
and a16b3(ab_prod[70], a[16], b[3]);
and a17b3(ab_prod[71], a[17], b[3]);

and a0b4(ab_prod[72], a[0], b[4]);
and a1b4(ab_prod[73], a[1], b[4]);
and a2b4(ab_prod[74], a[2], b[4]);
and a3b4(ab_prod[75], a[3], b[4]);
and a4b4(ab_prod[76], a[4], b[4]);
and a5b4(ab_prod[77], a[5], b[4]);
and a6b4(ab_prod[78], a[6], b[4]);
and a7b4(ab_prod[79], a[7], b[4]);
and a8b4(ab_prod[80], a[8], b[4]);
and a9b4(ab_prod[81], a[9], b[4]);
and a10b4(ab_prod[82], a[10], b[4]);
and a11b4(ab_prod[83], a[11], b[4]);
and a12b4(ab_prod[84], a[12], b[4]);
and a13b4(ab_prod[85], a[13], b[4]);
and a14b4(ab_prod[86], a[14], b[4]);
and a15b4(ab_prod[87], a[15], b[4]);
and a16b4(ab_prod[88], a[16], b[4]);
and a17b4(ab_prod[89], a[17], b[4]);

and a0b5(ab_prod[90], a[0], b[5]);
and a1b5(ab_prod[91], a[1], b[5]);
and a2b5(ab_prod[92], a[2], b[5]);
and a3b5(ab_prod[93], a[3], b[5]);
and a4b5(ab_prod[94], a[4], b[5]);
and a5b5(ab_prod[95], a[5], b[5]);
and a6b5(ab_prod[96], a[6], b[5]);
and a7b5(ab_prod[97], a[7], b[5]);
and a8b5(ab_prod[98], a[8], b[5]);
and a9b5(ab_prod[99], a[9], b[5]);
and a10b5(ab_prod[100], a[10], b[5]);
and a11b5(ab_prod[101], a[11], b[5]);
and a12b5(ab_prod[102], a[12], b[5]);
and a13b5(ab_prod[103], a[13], b[5]);
and a14b5(ab_prod[104], a[14], b[5]);
and a15b5(ab_prod[105], a[15], b[5]);
and a16b5(ab_prod[106], a[16], b[5]);
and a17b5(ab_prod[107], a[17], b[5]);

and a0b6(ab_prod[108], a[0], b[6]);
and a1b6(ab_prod[109], a[1], b[6]);
and a2b6(ab_prod[110], a[2], b[6]);
and a3b6(ab_prod[111], a[3], b[6]);
and a4b6(ab_prod[112], a[4], b[6]);
and a5b6(ab_prod[113], a[5], b[6]);
and a6b6(ab_prod[114], a[6], b[6]);
and a7b6(ab_prod[115], a[7], b[6]);
and a8b6(ab_prod[116], a[8], b[6]);
and a9b6(ab_prod[117], a[9], b[6]);
and a10b6(ab_prod[118], a[10], b[6]);
and a11b6(ab_prod[119], a[11], b[6]);
and a12b6(ab_prod[120], a[12], b[6]);
and a13b6(ab_prod[121], a[13], b[6]);
and a14b6(ab_prod[122], a[14], b[6]);
and a15b6(ab_prod[123], a[15], b[6]);
and a16b6(ab_prod[124], a[16], b[6]);
and a17b6(ab_prod[125], a[17], b[6]);

and a0b7(ab_prod[126], a[0], b[7]);
and a1b7(ab_prod[127], a[1], b[7]);
and a2b7(ab_prod[128], a[2], b[7]);
and a3b7(ab_prod[129], a[3], b[7]);
and a4b7(ab_prod[130], a[4], b[7]);
and a5b7(ab_prod[131], a[5], b[7]);
and a6b7(ab_prod[132], a[6], b[7]);
and a7b7(ab_prod[133], a[7], b[7]);
and a8b7(ab_prod[134], a[8], b[7]);
and a9b7(ab_prod[135], a[9], b[7]);
and a10b7(ab_prod[136], a[10], b[7]);
and a11b7(ab_prod[137], a[11], b[7]);
and a12b7(ab_prod[138], a[12], b[7]);
and a13b7(ab_prod[139], a[13], b[7]);
and a14b7(ab_prod[140], a[14], b[7]);
and a15b7(ab_prod[141], a[15], b[7]);
and a16b7(ab_prod[142], a[16], b[7]);
and a17b7(ab_prod[143], a[17], b[7]);

and a0b8(ab_prod[144], a[0], b[8]);
and a1b8(ab_prod[145], a[1], b[8]);
and a2b8(ab_prod[146], a[2], b[8]);
and a3b8(ab_prod[147], a[3], b[8]);
and a4b8(ab_prod[148], a[4], b[8]);
and a5b8(ab_prod[149], a[5], b[8]);
and a6b8(ab_prod[150], a[6], b[8]);
and a7b8(ab_prod[151], a[7], b[8]);
and a8b8(ab_prod[152], a[8], b[8]);
and a9b8(ab_prod[153], a[9], b[8]);
and a10b8(ab_prod[154], a[10], b[8]);
and a11b8(ab_prod[155], a[11], b[8]);
and a12b8(ab_prod[156], a[12], b[8]);
and a13b8(ab_prod[157], a[13], b[8]);
and a14b8(ab_prod[158], a[14], b[8]);
and a15b8(ab_prod[159], a[15], b[8]);
and a16b8(ab_prod[160], a[16], b[8]);
and a17b8(ab_prod[161], a[17], b[8]);

and a0b9(ab_prod[162], a[0], b[9]);
and a1b9(ab_prod[163], a[1], b[9]);
and a2b9(ab_prod[164], a[2], b[9]);
and a3b9(ab_prod[165], a[3], b[9]);
and a4b9(ab_prod[166], a[4], b[9]);
and a5b9(ab_prod[167], a[5], b[9]);
and a6b9(ab_prod[168], a[6], b[9]);
and a7b9(ab_prod[169], a[7], b[9]);
and a8b9(ab_prod[170], a[8], b[9]);
and a9b9(ab_prod[171], a[9], b[9]);
and a10b9(ab_prod[172], a[10], b[9]);
and a11b9(ab_prod[173], a[11], b[9]);
and a12b9(ab_prod[174], a[12], b[9]);
and a13b9(ab_prod[175], a[13], b[9]);
and a14b9(ab_prod[176], a[14], b[9]);
and a15b9(ab_prod[177], a[15], b[9]);
and a16b9(ab_prod[178], a[16], b[9]);
and a17b9(ab_prod[179], a[17], b[9]);

and a0b10(ab_prod[180], a[0], b[10]);
and a1b10(ab_prod[181], a[1], b[10]);
and a2b10(ab_prod[182], a[2], b[10]);
and a3b10(ab_prod[183], a[3], b[10]);
and a4b10(ab_prod[184], a[4], b[10]);
and a5b10(ab_prod[185], a[5], b[10]);
and a6b10(ab_prod[186], a[6], b[10]);
and a7b10(ab_prod[187], a[7], b[10]);
and a8b10(ab_prod[188], a[8], b[10]);
and a9b10(ab_prod[189], a[9], b[10]);
and a10b10(ab_prod[190], a[10], b[10]);
and a11b10(ab_prod[191], a[11], b[10]);
and a12b10(ab_prod[192], a[12], b[10]);
and a13b10(ab_prod[193], a[13], b[10]);
and a14b10(ab_prod[194], a[14], b[10]);
and a15b10(ab_prod[195], a[15], b[10]);
and a16b10(ab_prod[196], a[16], b[10]);
and a17b10(ab_prod[197], a[17], b[10]);

and a0b11(ab_prod[198], a[0], b[11]);
and a1b11(ab_prod[199], a[1], b[11]);
and a2b11(ab_prod[200], a[2], b[11]);
and a3b11(ab_prod[201], a[3], b[11]);
and a4b11(ab_prod[202], a[4], b[11]);
and a5b11(ab_prod[203], a[5], b[11]);
and a6b11(ab_prod[204], a[6], b[11]);
and a7b11(ab_prod[205], a[7], b[11]);
and a8b11(ab_prod[206], a[8], b[11]);
and a9b11(ab_prod[207], a[9], b[11]);
and a10b11(ab_prod[208], a[10], b[11]);
and a11b11(ab_prod[209], a[11], b[11]);
and a12b11(ab_prod[210], a[12], b[11]);
and a13b11(ab_prod[211], a[13], b[11]);
and a14b11(ab_prod[212], a[14], b[11]);
and a15b11(ab_prod[213], a[15], b[11]);
and a16b11(ab_prod[214], a[16], b[11]);
and a17b11(ab_prod[215], a[17], b[11]);

and a0b12(ab_prod[216], a[0], b[12]);
and a1b12(ab_prod[217], a[1], b[12]);
and a2b12(ab_prod[218], a[2], b[12]);
and a3b12(ab_prod[219], a[3], b[12]);
and a4b12(ab_prod[220], a[4], b[12]);
and a5b12(ab_prod[221], a[5], b[12]);
and a6b12(ab_prod[222], a[6], b[12]);
and a7b12(ab_prod[223], a[7], b[12]);
and a8b12(ab_prod[224], a[8], b[12]);
and a9b12(ab_prod[225], a[9], b[12]);
and a10b12(ab_prod[226], a[10], b[12]);
and a11b12(ab_prod[227], a[11], b[12]);
and a12b12(ab_prod[228], a[12], b[12]);
and a13b12(ab_prod[229], a[13], b[12]);
and a14b12(ab_prod[230], a[14], b[12]);
and a15b12(ab_prod[231], a[15], b[12]);
and a16b12(ab_prod[232], a[16], b[12]);
and a17b12(ab_prod[233], a[17], b[12]);

and a0b13(ab_prod[234], a[0], b[13]);
and a1b13(ab_prod[235], a[1], b[13]);
and a2b13(ab_prod[236], a[2], b[13]);
and a3b13(ab_prod[237], a[3], b[13]);
and a4b13(ab_prod[238], a[4], b[13]);
and a5b13(ab_prod[239], a[5], b[13]);
and a6b13(ab_prod[240], a[6], b[13]);
and a7b13(ab_prod[241], a[7], b[13]);
and a8b13(ab_prod[242], a[8], b[13]);
and a9b13(ab_prod[243], a[9], b[13]);
and a10b13(ab_prod[244], a[10], b[13]);
and a11b13(ab_prod[245], a[11], b[13]);
and a12b13(ab_prod[246], a[12], b[13]);
and a13b13(ab_prod[247], a[13], b[13]);
and a14b13(ab_prod[248], a[14], b[13]);
and a15b13(ab_prod[249], a[15], b[13]);
and a16b13(ab_prod[250], a[16], b[13]);
and a17b13(ab_prod[251], a[17], b[13]);

and a0b14(ab_prod[252], a[0], b[14]);
and a1b14(ab_prod[253], a[1], b[14]);
and a2b14(ab_prod[254], a[2], b[14]);
and a3b14(ab_prod[255], a[3], b[14]);
and a4b14(ab_prod[256], a[4], b[14]);
and a5b14(ab_prod[257], a[5], b[14]);
and a6b14(ab_prod[258], a[6], b[14]);
and a7b14(ab_prod[259], a[7], b[14]);
and a8b14(ab_prod[260], a[8], b[14]);
and a9b14(ab_prod[261], a[9], b[14]);
and a10b14(ab_prod[262], a[10], b[14]);
and a11b14(ab_prod[263], a[11], b[14]);
and a12b14(ab_prod[264], a[12], b[14]);
and a13b14(ab_prod[265], a[13], b[14]);
and a14b14(ab_prod[266], a[14], b[14]);
and a15b14(ab_prod[267], a[15], b[14]);
and a16b14(ab_prod[268], a[16], b[14]);
and a17b14(ab_prod[269], a[17], b[14]);

and a0b15(ab_prod[270], a[0], b[15]);
and a1b15(ab_prod[271], a[1], b[15]);
and a2b15(ab_prod[272], a[2], b[15]);
and a3b15(ab_prod[273], a[3], b[15]);
and a4b15(ab_prod[274], a[4], b[15]);
and a5b15(ab_prod[275], a[5], b[15]);
and a6b15(ab_prod[276], a[6], b[15]);
and a7b15(ab_prod[277], a[7], b[15]);
and a8b15(ab_prod[278], a[8], b[15]);
and a9b15(ab_prod[279], a[9], b[15]);
and a10b15(ab_prod[280], a[10], b[15]);
and a11b15(ab_prod[281], a[11], b[15]);
and a12b15(ab_prod[282], a[12], b[15]);
and a13b15(ab_prod[283], a[13], b[15]);
and a14b15(ab_prod[284], a[14], b[15]);
and a15b15(ab_prod[285], a[15], b[15]);
and a16b15(ab_prod[286], a[16], b[15]);
and a17b15(ab_prod[287], a[17], b[15]);

and a0b16(ab_prod[288], a[0], b[16]);
and a1b16(ab_prod[289], a[1], b[16]);
and a2b16(ab_prod[290], a[2], b[16]);
and a3b16(ab_prod[291], a[3], b[16]);
and a4b16(ab_prod[292], a[4], b[16]);
and a5b16(ab_prod[293], a[5], b[16]);
and a6b16(ab_prod[294], a[6], b[16]);
and a7b16(ab_prod[295], a[7], b[16]);
and a8b16(ab_prod[296], a[8], b[16]);
and a9b16(ab_prod[297], a[9], b[16]);
and a10b16(ab_prod[298], a[10], b[16]);
and a11b16(ab_prod[299], a[11], b[16]);
and a12b16(ab_prod[300], a[12], b[16]);
and a13b16(ab_prod[301], a[13], b[16]);
and a14b16(ab_prod[302], a[14], b[16]);
and a15b16(ab_prod[303], a[15], b[16]);
and a16b16(ab_prod[304], a[16], b[16]);
and a17b16(ab_prod[305], a[17], b[16]);

and a0b17(ab_prod[306], a[0], b[17]);
and a1b17(ab_prod[307], a[1], b[17]);
and a2b17(ab_prod[308], a[2], b[17]);
and a3b17(ab_prod[309], a[3], b[17]);
and a4b17(ab_prod[310], a[4], b[17]);
and a5b17(ab_prod[311], a[5], b[17]);
and a6b17(ab_prod[312], a[6], b[17]);
and a7b17(ab_prod[313], a[7], b[17]);
and a8b17(ab_prod[314], a[8], b[17]);
and a9b17(ab_prod[315], a[9], b[17]);
and a10b17(ab_prod[316], a[10], b[17]);
and a11b17(ab_prod[317], a[11], b[17]);
and a12b17(ab_prod[318], a[12], b[17]);
and a13b17(ab_prod[319], a[13], b[17]);
and a14b17(ab_prod[320], a[14], b[17]);
and a15b17(ab_prod[321], a[15], b[17]);
and a16b17(ab_prod[322], a[16], b[17]);
and a17b17(ab_prod[323], a[17], b[17]);



// Partial Sum Generation

assign psum[0] = ab_prod[0];

fa fa1 (.a(ab_prod[1]), .b(ab_prod[18]), .c_in(carry[0]), .sum(psum[1]), .c_out(carry[0 + 1]) );
fa fa2 (.a(ab_prod[2]), .b(ab_prod[19]), .c_in(carry[1]), .sum(psum[2]), .c_out(carry[1 + 1]) );
fa fa3 (.a(ab_prod[3]), .b(ab_prod[20]), .c_in(carry[2]), .sum(psum[3]), .c_out(carry[2 + 1]) );
fa fa4 (.a(ab_prod[4]), .b(ab_prod[21]), .c_in(carry[3]), .sum(psum[4]), .c_out(carry[3 + 1]) );
fa fa5 (.a(ab_prod[5]), .b(ab_prod[22]), .c_in(carry[4]), .sum(psum[5]), .c_out(carry[4 + 1]) );
fa fa6 (.a(ab_prod[6]), .b(ab_prod[23]), .c_in(carry[5]), .sum(psum[6]), .c_out(carry[5 + 1]) );
fa fa7 (.a(ab_prod[7]), .b(ab_prod[24]), .c_in(carry[6]), .sum(psum[7]), .c_out(carry[6 + 1]) );
fa fa8 (.a(ab_prod[8]), .b(ab_prod[25]), .c_in(carry[7]), .sum(psum[8]), .c_out(carry[7 + 1]) );
fa fa9 (.a(ab_prod[9]), .b(ab_prod[26]), .c_in(carry[8]), .sum(psum[9]), .c_out(carry[8 + 1]) );
fa fa10 (.a(ab_prod[10]), .b(ab_prod[27]), .c_in(carry[9]), .sum(psum[10]), .c_out(carry[9 + 1]) );
fa fa11 (.a(ab_prod[11]), .b(ab_prod[28]), .c_in(carry[10]), .sum(psum[11]), .c_out(carry[10 + 1]) );
fa fa12 (.a(ab_prod[12]), .b(ab_prod[29]), .c_in(carry[11]), .sum(psum[12]), .c_out(carry[11 + 1]) );
fa fa13 (.a(ab_prod[13]), .b(ab_prod[30]), .c_in(carry[12]), .sum(psum[13]), .c_out(carry[12 + 1]) );
fa fa14 (.a(ab_prod[14]), .b(ab_prod[31]), .c_in(carry[13]), .sum(psum[14]), .c_out(carry[13 + 1]) );
fa fa15 (.a(ab_prod[15]), .b(ab_prod[32]), .c_in(carry[14]), .sum(psum[15]), .c_out(carry[14 + 1]) );
fa fa16 (.a(ab_prod[16]), .b(ab_prod[33]), .c_in(carry[15]), .sum(psum[16]), .c_out(carry[15 + 1]) );
fa fa17 (.a(ab_prod[17]), .b(ab_prod[34]), .c_in(carry[16]), .sum(psum[17]), .c_out(carry[16 + 1]) );
fa fa18 (.a(1'b0), .b(ab_prod[35]), .c_in(carry[17]), .sum(psum[18]), .c_out(carry[17 + 1]) );

fa fa19(.a(ab_prod[36]), .b(psum[2]), .c_in(carry[19]), .sum(psum[19]), .c_out(carry[19 + 1]) );
fa fa20(.a(ab_prod[37]), .b(psum[3]), .c_in(carry[20]), .sum(psum[20]), .c_out(carry[20 + 1]) );
fa fa21(.a(ab_prod[38]), .b(psum[4]), .c_in(carry[21]), .sum(psum[21]), .c_out(carry[21 + 1]) );
fa fa22(.a(ab_prod[39]), .b(psum[5]), .c_in(carry[22]), .sum(psum[22]), .c_out(carry[22 + 1]) );
fa fa23(.a(ab_prod[40]), .b(psum[6]), .c_in(carry[23]), .sum(psum[23]), .c_out(carry[23 + 1]) );
fa fa24(.a(ab_prod[41]), .b(psum[7]), .c_in(carry[24]), .sum(psum[24]), .c_out(carry[24 + 1]) );
fa fa25(.a(ab_prod[42]), .b(psum[8]), .c_in(carry[25]), .sum(psum[25]), .c_out(carry[25 + 1]) );
fa fa26(.a(ab_prod[43]), .b(psum[9]), .c_in(carry[26]), .sum(psum[26]), .c_out(carry[26 + 1]) );
fa fa27(.a(ab_prod[44]), .b(psum[10]), .c_in(carry[27]), .sum(psum[27]), .c_out(carry[27 + 1]) );
fa fa28(.a(ab_prod[45]), .b(psum[11]), .c_in(carry[28]), .sum(psum[28]), .c_out(carry[28 + 1]) );
fa fa29(.a(ab_prod[46]), .b(psum[12]), .c_in(carry[29]), .sum(psum[29]), .c_out(carry[29 + 1]) );
fa fa30(.a(ab_prod[47]), .b(psum[13]), .c_in(carry[30]), .sum(psum[30]), .c_out(carry[30 + 1]) );
fa fa31(.a(ab_prod[48]), .b(psum[14]), .c_in(carry[31]), .sum(psum[31]), .c_out(carry[31 + 1]) );
fa fa32(.a(ab_prod[49]), .b(psum[15]), .c_in(carry[32]), .sum(psum[32]), .c_out(carry[32 + 1]) );
fa fa33(.a(ab_prod[50]), .b(psum[16]), .c_in(carry[33]), .sum(psum[33]), .c_out(carry[33 + 1]) );
fa fa34(.a(ab_prod[51]), .b(psum[17]), .c_in(carry[34]), .sum(psum[34]), .c_out(carry[34 + 1]) );
fa fa35(.a(ab_prod[52]), .b(psum[18]), .c_in(carry[35]), .sum(psum[35]), .c_out(carry[35 + 1]) );
fa fa36 (.a(ab_prod[53]), .b(carry[36 - 18]), .c_in(carry[36]), .sum(psum[36]), .c_out(carry[36 + 1]) );

fa fa37(.a(ab_prod[54]), .b(psum[20]), .c_in(carry[38]), .sum(psum[37]), .c_out(carry[38 + 1]) );
fa fa38(.a(ab_prod[55]), .b(psum[21]), .c_in(carry[39]), .sum(psum[38]), .c_out(carry[39 + 1]) );
fa fa39(.a(ab_prod[56]), .b(psum[22]), .c_in(carry[40]), .sum(psum[39]), .c_out(carry[40 + 1]) );
fa fa40(.a(ab_prod[57]), .b(psum[23]), .c_in(carry[41]), .sum(psum[40]), .c_out(carry[41 + 1]) );
fa fa41(.a(ab_prod[58]), .b(psum[24]), .c_in(carry[42]), .sum(psum[41]), .c_out(carry[42 + 1]) );
fa fa42(.a(ab_prod[59]), .b(psum[25]), .c_in(carry[43]), .sum(psum[42]), .c_out(carry[43 + 1]) );
fa fa43(.a(ab_prod[60]), .b(psum[26]), .c_in(carry[44]), .sum(psum[43]), .c_out(carry[44 + 1]) );
fa fa44(.a(ab_prod[61]), .b(psum[27]), .c_in(carry[45]), .sum(psum[44]), .c_out(carry[45 + 1]) );
fa fa45(.a(ab_prod[62]), .b(psum[28]), .c_in(carry[46]), .sum(psum[45]), .c_out(carry[46 + 1]) );
fa fa46(.a(ab_prod[63]), .b(psum[29]), .c_in(carry[47]), .sum(psum[46]), .c_out(carry[47 + 1]) );
fa fa47(.a(ab_prod[64]), .b(psum[30]), .c_in(carry[48]), .sum(psum[47]), .c_out(carry[48 + 1]) );
fa fa48(.a(ab_prod[65]), .b(psum[31]), .c_in(carry[49]), .sum(psum[48]), .c_out(carry[49 + 1]) );
fa fa49(.a(ab_prod[66]), .b(psum[32]), .c_in(carry[50]), .sum(psum[49]), .c_out(carry[50 + 1]) );
fa fa50(.a(ab_prod[67]), .b(psum[33]), .c_in(carry[51]), .sum(psum[50]), .c_out(carry[51 + 1]) );
fa fa51(.a(ab_prod[68]), .b(psum[34]), .c_in(carry[52]), .sum(psum[51]), .c_out(carry[52 + 1]) );
fa fa52(.a(ab_prod[69]), .b(psum[35]), .c_in(carry[53]), .sum(psum[52]), .c_out(carry[53 + 1]) );
fa fa53(.a(ab_prod[70]), .b(psum[36]), .c_in(carry[54]), .sum(psum[53]), .c_out(carry[54 + 1]) );
fa fa54 (.a(ab_prod[71]), .b(carry[55 - 18]), .c_in(carry[55]), .sum(psum[54]), .c_out(carry[55 + 1]) );

fa fa55(.a(ab_prod[72]), .b(psum[38]), .c_in(carry[57]), .sum(psum[55]), .c_out(carry[57 + 1]) );
fa fa56(.a(ab_prod[73]), .b(psum[39]), .c_in(carry[58]), .sum(psum[56]), .c_out(carry[58 + 1]) );
fa fa57(.a(ab_prod[74]), .b(psum[40]), .c_in(carry[59]), .sum(psum[57]), .c_out(carry[59 + 1]) );
fa fa58(.a(ab_prod[75]), .b(psum[41]), .c_in(carry[60]), .sum(psum[58]), .c_out(carry[60 + 1]) );
fa fa59(.a(ab_prod[76]), .b(psum[42]), .c_in(carry[61]), .sum(psum[59]), .c_out(carry[61 + 1]) );
fa fa60(.a(ab_prod[77]), .b(psum[43]), .c_in(carry[62]), .sum(psum[60]), .c_out(carry[62 + 1]) );
fa fa61(.a(ab_prod[78]), .b(psum[44]), .c_in(carry[63]), .sum(psum[61]), .c_out(carry[63 + 1]) );
fa fa62(.a(ab_prod[79]), .b(psum[45]), .c_in(carry[64]), .sum(psum[62]), .c_out(carry[64 + 1]) );
fa fa63(.a(ab_prod[80]), .b(psum[46]), .c_in(carry[65]), .sum(psum[63]), .c_out(carry[65 + 1]) );
fa fa64(.a(ab_prod[81]), .b(psum[47]), .c_in(carry[66]), .sum(psum[64]), .c_out(carry[66 + 1]) );
fa fa65(.a(ab_prod[82]), .b(psum[48]), .c_in(carry[67]), .sum(psum[65]), .c_out(carry[67 + 1]) );
fa fa66(.a(ab_prod[83]), .b(psum[49]), .c_in(carry[68]), .sum(psum[66]), .c_out(carry[68 + 1]) );
fa fa67(.a(ab_prod[84]), .b(psum[50]), .c_in(carry[69]), .sum(psum[67]), .c_out(carry[69 + 1]) );
fa fa68(.a(ab_prod[85]), .b(psum[51]), .c_in(carry[70]), .sum(psum[68]), .c_out(carry[70 + 1]) );
fa fa69(.a(ab_prod[86]), .b(psum[52]), .c_in(carry[71]), .sum(psum[69]), .c_out(carry[71 + 1]) );
fa fa70(.a(ab_prod[87]), .b(psum[53]), .c_in(carry[72]), .sum(psum[70]), .c_out(carry[72 + 1]) );
fa fa71(.a(ab_prod[88]), .b(psum[54]), .c_in(carry[73]), .sum(psum[71]), .c_out(carry[73 + 1]) );
fa fa72 (.a(ab_prod[89]), .b(carry[74 - 18]), .c_in(carry[74]), .sum(psum[72]), .c_out(carry[74 + 1]) );

fa fa73(.a(ab_prod[90]), .b(psum[56]), .c_in(carry[76]), .sum(psum[73]), .c_out(carry[76 + 1]) );
fa fa74(.a(ab_prod[91]), .b(psum[57]), .c_in(carry[77]), .sum(psum[74]), .c_out(carry[77 + 1]) );
fa fa75(.a(ab_prod[92]), .b(psum[58]), .c_in(carry[78]), .sum(psum[75]), .c_out(carry[78 + 1]) );
fa fa76(.a(ab_prod[93]), .b(psum[59]), .c_in(carry[79]), .sum(psum[76]), .c_out(carry[79 + 1]) );
fa fa77(.a(ab_prod[94]), .b(psum[60]), .c_in(carry[80]), .sum(psum[77]), .c_out(carry[80 + 1]) );
fa fa78(.a(ab_prod[95]), .b(psum[61]), .c_in(carry[81]), .sum(psum[78]), .c_out(carry[81 + 1]) );
fa fa79(.a(ab_prod[96]), .b(psum[62]), .c_in(carry[82]), .sum(psum[79]), .c_out(carry[82 + 1]) );
fa fa80(.a(ab_prod[97]), .b(psum[63]), .c_in(carry[83]), .sum(psum[80]), .c_out(carry[83 + 1]) );
fa fa81(.a(ab_prod[98]), .b(psum[64]), .c_in(carry[84]), .sum(psum[81]), .c_out(carry[84 + 1]) );
fa fa82(.a(ab_prod[99]), .b(psum[65]), .c_in(carry[85]), .sum(psum[82]), .c_out(carry[85 + 1]) );
fa fa83(.a(ab_prod[100]), .b(psum[66]), .c_in(carry[86]), .sum(psum[83]), .c_out(carry[86 + 1]) );
fa fa84(.a(ab_prod[101]), .b(psum[67]), .c_in(carry[87]), .sum(psum[84]), .c_out(carry[87 + 1]) );
fa fa85(.a(ab_prod[102]), .b(psum[68]), .c_in(carry[88]), .sum(psum[85]), .c_out(carry[88 + 1]) );
fa fa86(.a(ab_prod[103]), .b(psum[69]), .c_in(carry[89]), .sum(psum[86]), .c_out(carry[89 + 1]) );
fa fa87(.a(ab_prod[104]), .b(psum[70]), .c_in(carry[90]), .sum(psum[87]), .c_out(carry[90 + 1]) );
fa fa88(.a(ab_prod[105]), .b(psum[71]), .c_in(carry[91]), .sum(psum[88]), .c_out(carry[91 + 1]) );
fa fa89(.a(ab_prod[106]), .b(psum[72]), .c_in(carry[92]), .sum(psum[89]), .c_out(carry[92 + 1]) );
fa fa90 (.a(ab_prod[107]), .b(carry[93 - 18]), .c_in(carry[93]), .sum(psum[90]), .c_out(carry[93 + 1]) );

fa fa91(.a(ab_prod[108]), .b(psum[74]), .c_in(carry[95]), .sum(psum[91]), .c_out(carry[95 + 1]) );
fa fa92(.a(ab_prod[109]), .b(psum[75]), .c_in(carry[96]), .sum(psum[92]), .c_out(carry[96 + 1]) );
fa fa93(.a(ab_prod[110]), .b(psum[76]), .c_in(carry[97]), .sum(psum[93]), .c_out(carry[97 + 1]) );
fa fa94(.a(ab_prod[111]), .b(psum[77]), .c_in(carry[98]), .sum(psum[94]), .c_out(carry[98 + 1]) );
fa fa95(.a(ab_prod[112]), .b(psum[78]), .c_in(carry[99]), .sum(psum[95]), .c_out(carry[99 + 1]) );
fa fa96(.a(ab_prod[113]), .b(psum[79]), .c_in(carry[100]), .sum(psum[96]), .c_out(carry[100 + 1]) );
fa fa97(.a(ab_prod[114]), .b(psum[80]), .c_in(carry[101]), .sum(psum[97]), .c_out(carry[101 + 1]) );
fa fa98(.a(ab_prod[115]), .b(psum[81]), .c_in(carry[102]), .sum(psum[98]), .c_out(carry[102 + 1]) );
fa fa99(.a(ab_prod[116]), .b(psum[82]), .c_in(carry[103]), .sum(psum[99]), .c_out(carry[103 + 1]) );
fa fa100(.a(ab_prod[117]), .b(psum[83]), .c_in(carry[104]), .sum(psum[100]), .c_out(carry[104 + 1]) );
fa fa101(.a(ab_prod[118]), .b(psum[84]), .c_in(carry[105]), .sum(psum[101]), .c_out(carry[105 + 1]) );
fa fa102(.a(ab_prod[119]), .b(psum[85]), .c_in(carry[106]), .sum(psum[102]), .c_out(carry[106 + 1]) );
fa fa103(.a(ab_prod[120]), .b(psum[86]), .c_in(carry[107]), .sum(psum[103]), .c_out(carry[107 + 1]) );
fa fa104(.a(ab_prod[121]), .b(psum[87]), .c_in(carry[108]), .sum(psum[104]), .c_out(carry[108 + 1]) );
fa fa105(.a(ab_prod[122]), .b(psum[88]), .c_in(carry[109]), .sum(psum[105]), .c_out(carry[109 + 1]) );
fa fa106(.a(ab_prod[123]), .b(psum[89]), .c_in(carry[110]), .sum(psum[106]), .c_out(carry[110 + 1]) );
fa fa107(.a(ab_prod[124]), .b(psum[90]), .c_in(carry[111]), .sum(psum[107]), .c_out(carry[111 + 1]) );
fa fa108 (.a(ab_prod[125]), .b(carry[112 - 18]), .c_in(carry[112]), .sum(psum[108]), .c_out(carry[112 + 1]) );

fa fa109(.a(ab_prod[126]), .b(psum[92]), .c_in(carry[114]), .sum(psum[109]), .c_out(carry[114 + 1]) );
fa fa110(.a(ab_prod[127]), .b(psum[93]), .c_in(carry[115]), .sum(psum[110]), .c_out(carry[115 + 1]) );
fa fa111(.a(ab_prod[128]), .b(psum[94]), .c_in(carry[116]), .sum(psum[111]), .c_out(carry[116 + 1]) );
fa fa112(.a(ab_prod[129]), .b(psum[95]), .c_in(carry[117]), .sum(psum[112]), .c_out(carry[117 + 1]) );
fa fa113(.a(ab_prod[130]), .b(psum[96]), .c_in(carry[118]), .sum(psum[113]), .c_out(carry[118 + 1]) );
fa fa114(.a(ab_prod[131]), .b(psum[97]), .c_in(carry[119]), .sum(psum[114]), .c_out(carry[119 + 1]) );
fa fa115(.a(ab_prod[132]), .b(psum[98]), .c_in(carry[120]), .sum(psum[115]), .c_out(carry[120 + 1]) );
fa fa116(.a(ab_prod[133]), .b(psum[99]), .c_in(carry[121]), .sum(psum[116]), .c_out(carry[121 + 1]) );
fa fa117(.a(ab_prod[134]), .b(psum[100]), .c_in(carry[122]), .sum(psum[117]), .c_out(carry[122 + 1]) );
fa fa118(.a(ab_prod[135]), .b(psum[101]), .c_in(carry[123]), .sum(psum[118]), .c_out(carry[123 + 1]) );
fa fa119(.a(ab_prod[136]), .b(psum[102]), .c_in(carry[124]), .sum(psum[119]), .c_out(carry[124 + 1]) );
fa fa120(.a(ab_prod[137]), .b(psum[103]), .c_in(carry[125]), .sum(psum[120]), .c_out(carry[125 + 1]) );
fa fa121(.a(ab_prod[138]), .b(psum[104]), .c_in(carry[126]), .sum(psum[121]), .c_out(carry[126 + 1]) );
fa fa122(.a(ab_prod[139]), .b(psum[105]), .c_in(carry[127]), .sum(psum[122]), .c_out(carry[127 + 1]) );
fa fa123(.a(ab_prod[140]), .b(psum[106]), .c_in(carry[128]), .sum(psum[123]), .c_out(carry[128 + 1]) );
fa fa124(.a(ab_prod[141]), .b(psum[107]), .c_in(carry[129]), .sum(psum[124]), .c_out(carry[129 + 1]) );
fa fa125(.a(ab_prod[142]), .b(psum[108]), .c_in(carry[130]), .sum(psum[125]), .c_out(carry[130 + 1]) );
fa fa126 (.a(ab_prod[143]), .b(carry[131 - 18]), .c_in(carry[131]), .sum(psum[126]), .c_out(carry[131 + 1]) );

fa fa127(.a(ab_prod[144]), .b(psum[110]), .c_in(carry[133]), .sum(psum[127]), .c_out(carry[133 + 1]) );
fa fa128(.a(ab_prod[145]), .b(psum[111]), .c_in(carry[134]), .sum(psum[128]), .c_out(carry[134 + 1]) );
fa fa129(.a(ab_prod[146]), .b(psum[112]), .c_in(carry[135]), .sum(psum[129]), .c_out(carry[135 + 1]) );
fa fa130(.a(ab_prod[147]), .b(psum[113]), .c_in(carry[136]), .sum(psum[130]), .c_out(carry[136 + 1]) );
fa fa131(.a(ab_prod[148]), .b(psum[114]), .c_in(carry[137]), .sum(psum[131]), .c_out(carry[137 + 1]) );
fa fa132(.a(ab_prod[149]), .b(psum[115]), .c_in(carry[138]), .sum(psum[132]), .c_out(carry[138 + 1]) );
fa fa133(.a(ab_prod[150]), .b(psum[116]), .c_in(carry[139]), .sum(psum[133]), .c_out(carry[139 + 1]) );
fa fa134(.a(ab_prod[151]), .b(psum[117]), .c_in(carry[140]), .sum(psum[134]), .c_out(carry[140 + 1]) );
fa fa135(.a(ab_prod[152]), .b(psum[118]), .c_in(carry[141]), .sum(psum[135]), .c_out(carry[141 + 1]) );
fa fa136(.a(ab_prod[153]), .b(psum[119]), .c_in(carry[142]), .sum(psum[136]), .c_out(carry[142 + 1]) );
fa fa137(.a(ab_prod[154]), .b(psum[120]), .c_in(carry[143]), .sum(psum[137]), .c_out(carry[143 + 1]) );
fa fa138(.a(ab_prod[155]), .b(psum[121]), .c_in(carry[144]), .sum(psum[138]), .c_out(carry[144 + 1]) );
fa fa139(.a(ab_prod[156]), .b(psum[122]), .c_in(carry[145]), .sum(psum[139]), .c_out(carry[145 + 1]) );
fa fa140(.a(ab_prod[157]), .b(psum[123]), .c_in(carry[146]), .sum(psum[140]), .c_out(carry[146 + 1]) );
fa fa141(.a(ab_prod[158]), .b(psum[124]), .c_in(carry[147]), .sum(psum[141]), .c_out(carry[147 + 1]) );
fa fa142(.a(ab_prod[159]), .b(psum[125]), .c_in(carry[148]), .sum(psum[142]), .c_out(carry[148 + 1]) );
fa fa143(.a(ab_prod[160]), .b(psum[126]), .c_in(carry[149]), .sum(psum[143]), .c_out(carry[149 + 1]) );
fa fa144 (.a(ab_prod[161]), .b(carry[150 - 18]), .c_in(carry[150]), .sum(psum[144]), .c_out(carry[150 + 1]) );

fa fa145(.a(ab_prod[162]), .b(psum[128]), .c_in(carry[152]), .sum(psum[145]), .c_out(carry[152 + 1]) );
fa fa146(.a(ab_prod[163]), .b(psum[129]), .c_in(carry[153]), .sum(psum[146]), .c_out(carry[153 + 1]) );
fa fa147(.a(ab_prod[164]), .b(psum[130]), .c_in(carry[154]), .sum(psum[147]), .c_out(carry[154 + 1]) );
fa fa148(.a(ab_prod[165]), .b(psum[131]), .c_in(carry[155]), .sum(psum[148]), .c_out(carry[155 + 1]) );
fa fa149(.a(ab_prod[166]), .b(psum[132]), .c_in(carry[156]), .sum(psum[149]), .c_out(carry[156 + 1]) );
fa fa150(.a(ab_prod[167]), .b(psum[133]), .c_in(carry[157]), .sum(psum[150]), .c_out(carry[157 + 1]) );
fa fa151(.a(ab_prod[168]), .b(psum[134]), .c_in(carry[158]), .sum(psum[151]), .c_out(carry[158 + 1]) );
fa fa152(.a(ab_prod[169]), .b(psum[135]), .c_in(carry[159]), .sum(psum[152]), .c_out(carry[159 + 1]) );
fa fa153(.a(ab_prod[170]), .b(psum[136]), .c_in(carry[160]), .sum(psum[153]), .c_out(carry[160 + 1]) );
fa fa154(.a(ab_prod[171]), .b(psum[137]), .c_in(carry[161]), .sum(psum[154]), .c_out(carry[161 + 1]) );
fa fa155(.a(ab_prod[172]), .b(psum[138]), .c_in(carry[162]), .sum(psum[155]), .c_out(carry[162 + 1]) );
fa fa156(.a(ab_prod[173]), .b(psum[139]), .c_in(carry[163]), .sum(psum[156]), .c_out(carry[163 + 1]) );
fa fa157(.a(ab_prod[174]), .b(psum[140]), .c_in(carry[164]), .sum(psum[157]), .c_out(carry[164 + 1]) );
fa fa158(.a(ab_prod[175]), .b(psum[141]), .c_in(carry[165]), .sum(psum[158]), .c_out(carry[165 + 1]) );
fa fa159(.a(ab_prod[176]), .b(psum[142]), .c_in(carry[166]), .sum(psum[159]), .c_out(carry[166 + 1]) );
fa fa160(.a(ab_prod[177]), .b(psum[143]), .c_in(carry[167]), .sum(psum[160]), .c_out(carry[167 + 1]) );
fa fa161(.a(ab_prod[178]), .b(psum[144]), .c_in(carry[168]), .sum(psum[161]), .c_out(carry[168 + 1]) );
fa fa162 (.a(ab_prod[179]), .b(carry[169 - 18]), .c_in(carry[169]), .sum(psum[162]), .c_out(carry[169 + 1]) );

fa fa163(.a(ab_prod[180]), .b(psum[146]), .c_in(carry[171]), .sum(psum[163]), .c_out(carry[171 + 1]) );
fa fa164(.a(ab_prod[181]), .b(psum[147]), .c_in(carry[172]), .sum(psum[164]), .c_out(carry[172 + 1]) );
fa fa165(.a(ab_prod[182]), .b(psum[148]), .c_in(carry[173]), .sum(psum[165]), .c_out(carry[173 + 1]) );
fa fa166(.a(ab_prod[183]), .b(psum[149]), .c_in(carry[174]), .sum(psum[166]), .c_out(carry[174 + 1]) );
fa fa167(.a(ab_prod[184]), .b(psum[150]), .c_in(carry[175]), .sum(psum[167]), .c_out(carry[175 + 1]) );
fa fa168(.a(ab_prod[185]), .b(psum[151]), .c_in(carry[176]), .sum(psum[168]), .c_out(carry[176 + 1]) );
fa fa169(.a(ab_prod[186]), .b(psum[152]), .c_in(carry[177]), .sum(psum[169]), .c_out(carry[177 + 1]) );
fa fa170(.a(ab_prod[187]), .b(psum[153]), .c_in(carry[178]), .sum(psum[170]), .c_out(carry[178 + 1]) );
fa fa171(.a(ab_prod[188]), .b(psum[154]), .c_in(carry[179]), .sum(psum[171]), .c_out(carry[179 + 1]) );
fa fa172(.a(ab_prod[189]), .b(psum[155]), .c_in(carry[180]), .sum(psum[172]), .c_out(carry[180 + 1]) );
fa fa173(.a(ab_prod[190]), .b(psum[156]), .c_in(carry[181]), .sum(psum[173]), .c_out(carry[181 + 1]) );
fa fa174(.a(ab_prod[191]), .b(psum[157]), .c_in(carry[182]), .sum(psum[174]), .c_out(carry[182 + 1]) );
fa fa175(.a(ab_prod[192]), .b(psum[158]), .c_in(carry[183]), .sum(psum[175]), .c_out(carry[183 + 1]) );
fa fa176(.a(ab_prod[193]), .b(psum[159]), .c_in(carry[184]), .sum(psum[176]), .c_out(carry[184 + 1]) );
fa fa177(.a(ab_prod[194]), .b(psum[160]), .c_in(carry[185]), .sum(psum[177]), .c_out(carry[185 + 1]) );
fa fa178(.a(ab_prod[195]), .b(psum[161]), .c_in(carry[186]), .sum(psum[178]), .c_out(carry[186 + 1]) );
fa fa179(.a(ab_prod[196]), .b(psum[162]), .c_in(carry[187]), .sum(psum[179]), .c_out(carry[187 + 1]) );
fa fa180 (.a(ab_prod[197]), .b(carry[188 - 18]), .c_in(carry[188]), .sum(psum[180]), .c_out(carry[188 + 1]) );

fa fa181(.a(ab_prod[198]), .b(psum[164]), .c_in(carry[190]), .sum(psum[181]), .c_out(carry[190 + 1]) );
fa fa182(.a(ab_prod[199]), .b(psum[165]), .c_in(carry[191]), .sum(psum[182]), .c_out(carry[191 + 1]) );
fa fa183(.a(ab_prod[200]), .b(psum[166]), .c_in(carry[192]), .sum(psum[183]), .c_out(carry[192 + 1]) );
fa fa184(.a(ab_prod[201]), .b(psum[167]), .c_in(carry[193]), .sum(psum[184]), .c_out(carry[193 + 1]) );
fa fa185(.a(ab_prod[202]), .b(psum[168]), .c_in(carry[194]), .sum(psum[185]), .c_out(carry[194 + 1]) );
fa fa186(.a(ab_prod[203]), .b(psum[169]), .c_in(carry[195]), .sum(psum[186]), .c_out(carry[195 + 1]) );
fa fa187(.a(ab_prod[204]), .b(psum[170]), .c_in(carry[196]), .sum(psum[187]), .c_out(carry[196 + 1]) );
fa fa188(.a(ab_prod[205]), .b(psum[171]), .c_in(carry[197]), .sum(psum[188]), .c_out(carry[197 + 1]) );
fa fa189(.a(ab_prod[206]), .b(psum[172]), .c_in(carry[198]), .sum(psum[189]), .c_out(carry[198 + 1]) );
fa fa190(.a(ab_prod[207]), .b(psum[173]), .c_in(carry[199]), .sum(psum[190]), .c_out(carry[199 + 1]) );
fa fa191(.a(ab_prod[208]), .b(psum[174]), .c_in(carry[200]), .sum(psum[191]), .c_out(carry[200 + 1]) );
fa fa192(.a(ab_prod[209]), .b(psum[175]), .c_in(carry[201]), .sum(psum[192]), .c_out(carry[201 + 1]) );
fa fa193(.a(ab_prod[210]), .b(psum[176]), .c_in(carry[202]), .sum(psum[193]), .c_out(carry[202 + 1]) );
fa fa194(.a(ab_prod[211]), .b(psum[177]), .c_in(carry[203]), .sum(psum[194]), .c_out(carry[203 + 1]) );
fa fa195(.a(ab_prod[212]), .b(psum[178]), .c_in(carry[204]), .sum(psum[195]), .c_out(carry[204 + 1]) );
fa fa196(.a(ab_prod[213]), .b(psum[179]), .c_in(carry[205]), .sum(psum[196]), .c_out(carry[205 + 1]) );
fa fa197(.a(ab_prod[214]), .b(psum[180]), .c_in(carry[206]), .sum(psum[197]), .c_out(carry[206 + 1]) );
fa fa198 (.a(ab_prod[215]), .b(carry[207 - 18]), .c_in(carry[207]), .sum(psum[198]), .c_out(carry[207 + 1]) );

fa fa199(.a(ab_prod[216]), .b(psum[182]), .c_in(carry[209]), .sum(psum[199]), .c_out(carry[209 + 1]) );
fa fa200(.a(ab_prod[217]), .b(psum[183]), .c_in(carry[210]), .sum(psum[200]), .c_out(carry[210 + 1]) );
fa fa201(.a(ab_prod[218]), .b(psum[184]), .c_in(carry[211]), .sum(psum[201]), .c_out(carry[211 + 1]) );
fa fa202(.a(ab_prod[219]), .b(psum[185]), .c_in(carry[212]), .sum(psum[202]), .c_out(carry[212 + 1]) );
fa fa203(.a(ab_prod[220]), .b(psum[186]), .c_in(carry[213]), .sum(psum[203]), .c_out(carry[213 + 1]) );
fa fa204(.a(ab_prod[221]), .b(psum[187]), .c_in(carry[214]), .sum(psum[204]), .c_out(carry[214 + 1]) );
fa fa205(.a(ab_prod[222]), .b(psum[188]), .c_in(carry[215]), .sum(psum[205]), .c_out(carry[215 + 1]) );
fa fa206(.a(ab_prod[223]), .b(psum[189]), .c_in(carry[216]), .sum(psum[206]), .c_out(carry[216 + 1]) );
fa fa207(.a(ab_prod[224]), .b(psum[190]), .c_in(carry[217]), .sum(psum[207]), .c_out(carry[217 + 1]) );
fa fa208(.a(ab_prod[225]), .b(psum[191]), .c_in(carry[218]), .sum(psum[208]), .c_out(carry[218 + 1]) );
fa fa209(.a(ab_prod[226]), .b(psum[192]), .c_in(carry[219]), .sum(psum[209]), .c_out(carry[219 + 1]) );
fa fa210(.a(ab_prod[227]), .b(psum[193]), .c_in(carry[220]), .sum(psum[210]), .c_out(carry[220 + 1]) );
fa fa211(.a(ab_prod[228]), .b(psum[194]), .c_in(carry[221]), .sum(psum[211]), .c_out(carry[221 + 1]) );
fa fa212(.a(ab_prod[229]), .b(psum[195]), .c_in(carry[222]), .sum(psum[212]), .c_out(carry[222 + 1]) );
fa fa213(.a(ab_prod[230]), .b(psum[196]), .c_in(carry[223]), .sum(psum[213]), .c_out(carry[223 + 1]) );
fa fa214(.a(ab_prod[231]), .b(psum[197]), .c_in(carry[224]), .sum(psum[214]), .c_out(carry[224 + 1]) );
fa fa215(.a(ab_prod[232]), .b(psum[198]), .c_in(carry[225]), .sum(psum[215]), .c_out(carry[225 + 1]) );
fa fa216 (.a(ab_prod[233]), .b(carry[226 - 18]), .c_in(carry[226]), .sum(psum[216]), .c_out(carry[226 + 1]) );

fa fa217(.a(ab_prod[234]), .b(psum[200]), .c_in(carry[228]), .sum(psum[217]), .c_out(carry[228 + 1]) );
fa fa218(.a(ab_prod[235]), .b(psum[201]), .c_in(carry[229]), .sum(psum[218]), .c_out(carry[229 + 1]) );
fa fa219(.a(ab_prod[236]), .b(psum[202]), .c_in(carry[230]), .sum(psum[219]), .c_out(carry[230 + 1]) );
fa fa220(.a(ab_prod[237]), .b(psum[203]), .c_in(carry[231]), .sum(psum[220]), .c_out(carry[231 + 1]) );
fa fa221(.a(ab_prod[238]), .b(psum[204]), .c_in(carry[232]), .sum(psum[221]), .c_out(carry[232 + 1]) );
fa fa222(.a(ab_prod[239]), .b(psum[205]), .c_in(carry[233]), .sum(psum[222]), .c_out(carry[233 + 1]) );
fa fa223(.a(ab_prod[240]), .b(psum[206]), .c_in(carry[234]), .sum(psum[223]), .c_out(carry[234 + 1]) );
fa fa224(.a(ab_prod[241]), .b(psum[207]), .c_in(carry[235]), .sum(psum[224]), .c_out(carry[235 + 1]) );
fa fa225(.a(ab_prod[242]), .b(psum[208]), .c_in(carry[236]), .sum(psum[225]), .c_out(carry[236 + 1]) );
fa fa226(.a(ab_prod[243]), .b(psum[209]), .c_in(carry[237]), .sum(psum[226]), .c_out(carry[237 + 1]) );
fa fa227(.a(ab_prod[244]), .b(psum[210]), .c_in(carry[238]), .sum(psum[227]), .c_out(carry[238 + 1]) );
fa fa228(.a(ab_prod[245]), .b(psum[211]), .c_in(carry[239]), .sum(psum[228]), .c_out(carry[239 + 1]) );
fa fa229(.a(ab_prod[246]), .b(psum[212]), .c_in(carry[240]), .sum(psum[229]), .c_out(carry[240 + 1]) );
fa fa230(.a(ab_prod[247]), .b(psum[213]), .c_in(carry[241]), .sum(psum[230]), .c_out(carry[241 + 1]) );
fa fa231(.a(ab_prod[248]), .b(psum[214]), .c_in(carry[242]), .sum(psum[231]), .c_out(carry[242 + 1]) );
fa fa232(.a(ab_prod[249]), .b(psum[215]), .c_in(carry[243]), .sum(psum[232]), .c_out(carry[243 + 1]) );
fa fa233(.a(ab_prod[250]), .b(psum[216]), .c_in(carry[244]), .sum(psum[233]), .c_out(carry[244 + 1]) );
fa fa234 (.a(ab_prod[251]), .b(carry[245 - 18]), .c_in(carry[245]), .sum(psum[234]), .c_out(carry[245 + 1]) );

fa fa235(.a(ab_prod[252]), .b(psum[218]), .c_in(carry[247]), .sum(psum[235]), .c_out(carry[247 + 1]) );
fa fa236(.a(ab_prod[253]), .b(psum[219]), .c_in(carry[248]), .sum(psum[236]), .c_out(carry[248 + 1]) );
fa fa237(.a(ab_prod[254]), .b(psum[220]), .c_in(carry[249]), .sum(psum[237]), .c_out(carry[249 + 1]) );
fa fa238(.a(ab_prod[255]), .b(psum[221]), .c_in(carry[250]), .sum(psum[238]), .c_out(carry[250 + 1]) );
fa fa239(.a(ab_prod[256]), .b(psum[222]), .c_in(carry[251]), .sum(psum[239]), .c_out(carry[251 + 1]) );
fa fa240(.a(ab_prod[257]), .b(psum[223]), .c_in(carry[252]), .sum(psum[240]), .c_out(carry[252 + 1]) );
fa fa241(.a(ab_prod[258]), .b(psum[224]), .c_in(carry[253]), .sum(psum[241]), .c_out(carry[253 + 1]) );
fa fa242(.a(ab_prod[259]), .b(psum[225]), .c_in(carry[254]), .sum(psum[242]), .c_out(carry[254 + 1]) );
fa fa243(.a(ab_prod[260]), .b(psum[226]), .c_in(carry[255]), .sum(psum[243]), .c_out(carry[255 + 1]) );
fa fa244(.a(ab_prod[261]), .b(psum[227]), .c_in(carry[256]), .sum(psum[244]), .c_out(carry[256 + 1]) );
fa fa245(.a(ab_prod[262]), .b(psum[228]), .c_in(carry[257]), .sum(psum[245]), .c_out(carry[257 + 1]) );
fa fa246(.a(ab_prod[263]), .b(psum[229]), .c_in(carry[258]), .sum(psum[246]), .c_out(carry[258 + 1]) );
fa fa247(.a(ab_prod[264]), .b(psum[230]), .c_in(carry[259]), .sum(psum[247]), .c_out(carry[259 + 1]) );
fa fa248(.a(ab_prod[265]), .b(psum[231]), .c_in(carry[260]), .sum(psum[248]), .c_out(carry[260 + 1]) );
fa fa249(.a(ab_prod[266]), .b(psum[232]), .c_in(carry[261]), .sum(psum[249]), .c_out(carry[261 + 1]) );
fa fa250(.a(ab_prod[267]), .b(psum[233]), .c_in(carry[262]), .sum(psum[250]), .c_out(carry[262 + 1]) );
fa fa251(.a(ab_prod[268]), .b(psum[234]), .c_in(carry[263]), .sum(psum[251]), .c_out(carry[263 + 1]) );
fa fa252 (.a(ab_prod[269]), .b(carry[264 - 18]), .c_in(carry[264]), .sum(psum[252]), .c_out(carry[264 + 1]) );

fa fa253(.a(ab_prod[270]), .b(psum[236]), .c_in(carry[266]), .sum(psum[253]), .c_out(carry[266 + 1]) );
fa fa254(.a(ab_prod[271]), .b(psum[237]), .c_in(carry[267]), .sum(psum[254]), .c_out(carry[267 + 1]) );
fa fa255(.a(ab_prod[272]), .b(psum[238]), .c_in(carry[268]), .sum(psum[255]), .c_out(carry[268 + 1]) );
fa fa256(.a(ab_prod[273]), .b(psum[239]), .c_in(carry[269]), .sum(psum[256]), .c_out(carry[269 + 1]) );
fa fa257(.a(ab_prod[274]), .b(psum[240]), .c_in(carry[270]), .sum(psum[257]), .c_out(carry[270 + 1]) );
fa fa258(.a(ab_prod[275]), .b(psum[241]), .c_in(carry[271]), .sum(psum[258]), .c_out(carry[271 + 1]) );
fa fa259(.a(ab_prod[276]), .b(psum[242]), .c_in(carry[272]), .sum(psum[259]), .c_out(carry[272 + 1]) );
fa fa260(.a(ab_prod[277]), .b(psum[243]), .c_in(carry[273]), .sum(psum[260]), .c_out(carry[273 + 1]) );
fa fa261(.a(ab_prod[278]), .b(psum[244]), .c_in(carry[274]), .sum(psum[261]), .c_out(carry[274 + 1]) );
fa fa262(.a(ab_prod[279]), .b(psum[245]), .c_in(carry[275]), .sum(psum[262]), .c_out(carry[275 + 1]) );
fa fa263(.a(ab_prod[280]), .b(psum[246]), .c_in(carry[276]), .sum(psum[263]), .c_out(carry[276 + 1]) );
fa fa264(.a(ab_prod[281]), .b(psum[247]), .c_in(carry[277]), .sum(psum[264]), .c_out(carry[277 + 1]) );
fa fa265(.a(ab_prod[282]), .b(psum[248]), .c_in(carry[278]), .sum(psum[265]), .c_out(carry[278 + 1]) );
fa fa266(.a(ab_prod[283]), .b(psum[249]), .c_in(carry[279]), .sum(psum[266]), .c_out(carry[279 + 1]) );
fa fa267(.a(ab_prod[284]), .b(psum[250]), .c_in(carry[280]), .sum(psum[267]), .c_out(carry[280 + 1]) );
fa fa268(.a(ab_prod[285]), .b(psum[251]), .c_in(carry[281]), .sum(psum[268]), .c_out(carry[281 + 1]) );
fa fa269(.a(ab_prod[286]), .b(psum[252]), .c_in(carry[282]), .sum(psum[269]), .c_out(carry[282 + 1]) );
fa fa270 (.a(ab_prod[287]), .b(carry[283 - 18]), .c_in(carry[283]), .sum(psum[270]), .c_out(carry[283 + 1]) );

fa fa271(.a(ab_prod[288]), .b(psum[254]), .c_in(carry[285]), .sum(psum[271]), .c_out(carry[285 + 1]) );
fa fa272(.a(ab_prod[289]), .b(psum[255]), .c_in(carry[286]), .sum(psum[272]), .c_out(carry[286 + 1]) );
fa fa273(.a(ab_prod[290]), .b(psum[256]), .c_in(carry[287]), .sum(psum[273]), .c_out(carry[287 + 1]) );
fa fa274(.a(ab_prod[291]), .b(psum[257]), .c_in(carry[288]), .sum(psum[274]), .c_out(carry[288 + 1]) );
fa fa275(.a(ab_prod[292]), .b(psum[258]), .c_in(carry[289]), .sum(psum[275]), .c_out(carry[289 + 1]) );
fa fa276(.a(ab_prod[293]), .b(psum[259]), .c_in(carry[290]), .sum(psum[276]), .c_out(carry[290 + 1]) );
fa fa277(.a(ab_prod[294]), .b(psum[260]), .c_in(carry[291]), .sum(psum[277]), .c_out(carry[291 + 1]) );
fa fa278(.a(ab_prod[295]), .b(psum[261]), .c_in(carry[292]), .sum(psum[278]), .c_out(carry[292 + 1]) );
fa fa279(.a(ab_prod[296]), .b(psum[262]), .c_in(carry[293]), .sum(psum[279]), .c_out(carry[293 + 1]) );
fa fa280(.a(ab_prod[297]), .b(psum[263]), .c_in(carry[294]), .sum(psum[280]), .c_out(carry[294 + 1]) );
fa fa281(.a(ab_prod[298]), .b(psum[264]), .c_in(carry[295]), .sum(psum[281]), .c_out(carry[295 + 1]) );
fa fa282(.a(ab_prod[299]), .b(psum[265]), .c_in(carry[296]), .sum(psum[282]), .c_out(carry[296 + 1]) );
fa fa283(.a(ab_prod[300]), .b(psum[266]), .c_in(carry[297]), .sum(psum[283]), .c_out(carry[297 + 1]) );
fa fa284(.a(ab_prod[301]), .b(psum[267]), .c_in(carry[298]), .sum(psum[284]), .c_out(carry[298 + 1]) );
fa fa285(.a(ab_prod[302]), .b(psum[268]), .c_in(carry[299]), .sum(psum[285]), .c_out(carry[299 + 1]) );
fa fa286(.a(ab_prod[303]), .b(psum[269]), .c_in(carry[300]), .sum(psum[286]), .c_out(carry[300 + 1]) );
fa fa287(.a(ab_prod[304]), .b(psum[270]), .c_in(carry[301]), .sum(psum[287]), .c_out(carry[301 + 1]) );
fa fa288 (.a(ab_prod[305]), .b(carry[302 - 18]), .c_in(carry[302]), .sum(psum[288]), .c_out(carry[302 + 1]) );

fa fa289(.a(ab_prod[306]), .b(psum[272]), .c_in(carry[304]), .sum(psum[289]), .c_out(carry[304 + 1]) );
fa fa290(.a(ab_prod[307]), .b(psum[273]), .c_in(carry[305]), .sum(psum[290]), .c_out(carry[305 + 1]) );
fa fa291(.a(ab_prod[308]), .b(psum[274]), .c_in(carry[306]), .sum(psum[291]), .c_out(carry[306 + 1]) );
fa fa292(.a(ab_prod[309]), .b(psum[275]), .c_in(carry[307]), .sum(psum[292]), .c_out(carry[307 + 1]) );
fa fa293(.a(ab_prod[310]), .b(psum[276]), .c_in(carry[308]), .sum(psum[293]), .c_out(carry[308 + 1]) );
fa fa294(.a(ab_prod[311]), .b(psum[277]), .c_in(carry[309]), .sum(psum[294]), .c_out(carry[309 + 1]) );
fa fa295(.a(ab_prod[312]), .b(psum[278]), .c_in(carry[310]), .sum(psum[295]), .c_out(carry[310 + 1]) );
fa fa296(.a(ab_prod[313]), .b(psum[279]), .c_in(carry[311]), .sum(psum[296]), .c_out(carry[311 + 1]) );
fa fa297(.a(ab_prod[314]), .b(psum[280]), .c_in(carry[312]), .sum(psum[297]), .c_out(carry[312 + 1]) );
fa fa298(.a(ab_prod[315]), .b(psum[281]), .c_in(carry[313]), .sum(psum[298]), .c_out(carry[313 + 1]) );
fa fa299(.a(ab_prod[316]), .b(psum[282]), .c_in(carry[314]), .sum(psum[299]), .c_out(carry[314 + 1]) );
fa fa300(.a(ab_prod[317]), .b(psum[283]), .c_in(carry[315]), .sum(psum[300]), .c_out(carry[315 + 1]) );
fa fa301(.a(ab_prod[318]), .b(psum[284]), .c_in(carry[316]), .sum(psum[301]), .c_out(carry[316 + 1]) );
fa fa302(.a(ab_prod[319]), .b(psum[285]), .c_in(carry[317]), .sum(psum[302]), .c_out(carry[317 + 1]) );
fa fa303(.a(ab_prod[320]), .b(psum[286]), .c_in(carry[318]), .sum(psum[303]), .c_out(carry[318 + 1]) );
fa fa304(.a(ab_prod[321]), .b(psum[287]), .c_in(carry[319]), .sum(psum[304]), .c_out(carry[319 + 1]) );
fa fa305(.a(ab_prod[322]), .b(psum[288]), .c_in(carry[320]), .sum(psum[305]), .c_out(carry[320 + 1]) );
fa fa306 (.a(ab_prod[323]), .b(carry[321 - 18]), .c_in(carry[321]), .sum(psum[306]), .c_out(carry[321 + 1]) );


// Final Product Calculation


assign prod[0] = psum[0];
assign prod[1] = psum[1];

assign prod[2] = psum[18*(2-1) +1];
assign prod[3] = psum[18*(3-1) +1];
assign prod[4] = psum[18*(4-1) +1];
assign prod[5] = psum[18*(5-1) +1];
assign prod[6] = psum[18*(6-1) +1];
assign prod[7] = psum[18*(7-1) +1];
assign prod[8] = psum[18*(8-1) +1];
assign prod[9] = psum[18*(9-1) +1];
assign prod[10] = psum[18*(10-1) +1];
assign prod[11] = psum[18*(11-1) +1];
assign prod[12] = psum[18*(12-1) +1];
assign prod[13] = psum[18*(13-1) +1];
assign prod[14] = psum[18*(14-1) +1];
assign prod[15] = psum[18*(15-1) +1];
assign prod[16] = psum[18*(16-1) +1];
assign prod[17] = psum[18*(17-1) +1];
assign prod[17+2-1] = psum[(18 * (17 - 1)) +2];
assign prod[17+3-1] = psum[(18 * (17 - 1)) +3];
assign prod[17+4-1] = psum[(18 * (17 - 1)) +4];
assign prod[17+5-1] = psum[(18 * (17 - 1)) +5];
assign prod[17+6-1] = psum[(18 * (17 - 1)) +6];
assign prod[17+7-1] = psum[(18 * (17 - 1)) +7];
assign prod[17+8-1] = psum[(18 * (17 - 1)) +8];
assign prod[17+9-1] = psum[(18 * (17 - 1)) +9];
assign prod[17+10-1] = psum[(18 * (17 - 1)) +10];
assign prod[17+11-1] = psum[(18 * (17 - 1)) +11];
assign prod[17+12-1] = psum[(18 * (17 - 1)) +12];
assign prod[17+13-1] = psum[(18 * (17 - 1)) +13];
assign prod[17+14-1] = psum[(18 * (17 - 1)) +14];
assign prod[17+15-1] = psum[(18 * (17 - 1)) +15];
assign prod[17+16-1] = psum[(18 * (17 - 1)) +16];
assign prod[17+17-1] = psum[(18 * (17 - 1)) +17];
assign prod[17+18-1] = psum[(18 * (17 - 1)) +18];
assign prod[(18*2)-1] = carry[((18 +1)*(18 -1)) - 1 ];


endmodule
